name: Build CRUD API and Publish Documentation
on:
  push:
    branches:
      - development
      - main
    paths:
      - "python-sample-app/version.txt"
env:
  APP_PATH: python-sample-app
  ROLE_TO_ASSUME: ${{vars.ROLE_TO_ASSUME}}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
          id-token: write
          contents: read
    steps:
      - name: CheckOut Code
        uses: actions/checkout@v4

      - name: Get Data
        id: get_data
        run: |
          PYTHON_VERSION=$(sed -rn 's/FROM python:([0-9]+\.[0-9]+).*/\1/p' Dockerfile)
          APP_VERSION=$(sed -rn 's/app_version:[[:space:]]*(.*)/\1/p' version.txt)
          APP_NAME=$(sed -rn 's/app_version:[[:space:]]//g' version.txt)
          echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
        working-directory: ${{ env.APP_PATH }}

      - name: Setup Python
        if: steps.get_data.outcome == 'success'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.get_data.outputs.python_version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ${{ env.APP_PATH }}
        if: steps.get_data.outcome == 'success'

      - name: Flake8 Lint
        id: lint
        run: |
          pip install flake8
          flake8 .
        working-directory: ${{ env.APP_PATH }}
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{vars.ROLE_TO_ASSUME}}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REPOSITORY: ${{ steps.get_data.outputs.app_name}}
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          IMAGE_TAG: ${{steps.get_data.outputs.app_version}}-${{github.sha}}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

