name: Build CRUD API and Publish Documentation
on:
  push:
    branches:
      - development
      - main
    paths:
      - "python-sample-app/version.txt"
env:
  APP_PATH: python-sample-app
  ROLE_TO_ASSUME: ${{vars.ROLE_TO_ASSUME}}
  ARGO_APPLICATION_SET: argocd-crd/argocd-applications/argo-application-python-api.yml
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
          id-token: write
          contents: read
    steps:
      - name: CheckOut Code
        uses: actions/checkout@v4

      - name: Get Data
        id: get_data
        run: |
          PYTHON_VERSION=$(sed -rn 's/FROM python:([0-9]+\.[0-9]+).*/\1/p' Dockerfile)
          APP_VERSION=$(sed -rn 's/app_version:[[:space:]]*(.*)/\1/p' version.txt)
          APP_NAME=$(sed -rn 's/app_name:[[:space:]]//p' version.txt)
          echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
        working-directory: ${{ env.APP_PATH }}

      - name: Setup Python
        if: steps.get_data.outcome == 'success'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.get_data.outputs.python_version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ${{ env.APP_PATH }}
        if: steps.get_data.outcome == 'success'

      - name: Flake8 Lint
        id: lint
        run: |
          pip install flake8
          flake8 .
        working-directory: ${{ env.APP_PATH }}
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{vars.ROLE_TO_ASSUME}}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: build_push
        env:
          REPOSITORY: ${{ steps.get_data.outputs.app_name}}
          REGISTRY: ${{steps.login-ecr.outputs.registry}}
          IMAGE_TAG: ${{steps.get_data.outputs.app_version}}-${{github.sha}}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ${{env.APP_PATH}}

      - name: Waiting till Vulnerabilty Scan Finishes
        env:
          IMAGE_TAG: ${{steps.get_data.outputs.app_version}}-${{github.sha}}
          REPOSITORY: ${{steps.get_data.outputs.app_name}}
          REGION: ${{vars.ECR_REGION}}
        run: |
          sleep 10
          aws ecr wait image-scan-complete --repository-name $REPOSITORY --image-id imageTag=$IMAGE_TAG --region $AWS_REGION

      - name: Review Vulnerability Scan
        env:
          IMAGE_TAG: ${{steps.get_data.outputs.app_version}}-${{github.sha}}
          REPOSITORY: ${{steps.get_data.outputs.app_name}}
          REGION: ${{vars.ECR_REGION}}
        run: |
          findings=$(aws ecr describe-image-scan-findings --repository-name $REPOSITORY --image-id imageTag=$IMAGE_TAG --region $REGION --query imageScanFindings.findingSeverityCounts)

          HIGH=$(echo "$findings" | jq -r '.HIGH // 0')
          CRITICAL=$(echo "$findings" | jq -r '.CRITICAL // 0')

          if [ "$HIGH" -gt 0 ] || [ "$CRITICAL" -gt 0 ]; then 
            echo "Vulnerabilities found"
            # exit 1
          fi
    outputs:
      full_tag: ${{steps.get_data.outputs.app_version}}-${{github.sha}}
      python_version: ${{steps.get_data.outputs.python_version}}
          
  updateArgoApp:
    runs-on: ubuntu-latest
    needs: build
    permissions:
        id-token: write
        contents: write
    steps:
      - name: CheckOut Argocd CRD REpo
        uses: actions/checkout@v4

      - name: Update ImageTAg in ArgoAPP
        env:
          TAG: ${{needs.build.outputs.full_tag}}
          ARGO_APPLICATION_SET_PATH: ${{env.ARGO_APPLICATION_SET_PATH}}
        run: |
          yq e '.spec.generators[0].list.elements[0].imageTag = env(TAG)' -i argocd-crd/argocd-applications/argo-application-python-api.yml
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git pull origin main
          git add argocd-crd/argocd-applications/argo-application-python-api.yml
          git commit -m "Updates Tag for ${{ github.event.repository.name }} to ${{ needs.build.outputs.full_tag }}"
          git push origin main

  publishing_documentation:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: CheckOut Code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.build.outputs.python_version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ${{ env.APP_PATH }}
      
      - name: install wkhtmltopdf
        run: |
          sudo apt update
          sudo apt-get install -y wkhtmltopdf

      - name: Start FastAPI server in background
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
      - name: Generate static HTML for Swagger UI
        run: |
          wkhtmltopdf http://localhost:8000/docs docs.html
      - name: Create output directory
        run: |
          mkdir -p build
          mv docs.html build/index.html
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: build
          branch: gh-pages


          
